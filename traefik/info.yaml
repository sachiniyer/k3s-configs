NAME: traefik
LAST DEPLOYED: Wed Jun  7 22:42:17 2023
NAMESPACE: kube-system
STATUS: deployed
REVISION: 111
TEST SUITE: None
USER-SUPPLIED VALUES:
additionalArguments:
- --log.level=DEBUG
- --ping
- --metrics.prometheus
- --entryPoints.websecure.proxyProtocol.trustedIPs=10.64.0.2
- --entryPoints.web.forwardedHeaders.trustedIPs=10.64.0.2
- --entryPoints.websecure.forwardedHeaders.trustedIPs=10.64.0.2
deployment:
  kind: DaemonSet
global:
  systemDefaultRegistry: ""
image:
  name: traefik
  tag: 2.9.4
podAnnotations:
  prometheus.io/port: "8082"
  prometheus.io/scrape: "true"
priorityClassName: system-cluster-critical
providers:
  kubernetesIngress:
    publishedService:
      enabled: true
service:
  annotations:
    service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "true"
  ipFamilyPolicy: PreferDualStack
tolerations:
- key: CriticalAddonsOnly
  operator: Exists
- effect: NoSchedule
  key: node-role.kubernetes.io/control-plane
  operator: Exists
- effect: NoSchedule
  key: node-role.kubernetes.io/master
  operator: Exists

COMPUTED VALUES:
additionalArguments:
- --log.level=DEBUG
- --ping
- --metrics.prometheus
- --entryPoints.websecure.proxyProtocol.trustedIPs=10.64.0.2
- --entryPoints.web.forwardedHeaders.trustedIPs=10.64.0.2
- --entryPoints.websecure.forwardedHeaders.trustedIPs=10.64.0.2
additionalVolumeMounts: []
affinity: {}
autoscaling:
  enabled: false
certResolvers: {}
deployment:
  additionalContainers: []
  additionalVolumes: []
  annotations: {}
  enabled: true
  imagePullSecrets: []
  initContainers: []
  kind: DaemonSet
  labels: {}
  lifecycle: {}
  minReadySeconds: 0
  podAnnotations: {}
  podLabels: {}
  replicas: 1
  shareProcessNamespace: false
  terminationGracePeriodSeconds: 60
env: []
envFrom: []
experimental:
  kubernetesGateway:
    enabled: false
    gateway:
      enabled: true
  plugins:
    enabled: false
extraObjects: []
global:
  systemDefaultRegistry: ""
globalArguments:
- --global.checknewversion
- --global.sendanonymoususage
hostNetwork: false
hub:
  enabled: false
image:
  name: traefik
  pullPolicy: IfNotPresent
  tag: 2.9.4
ingressClass:
  enabled: true
  isDefaultClass: true
ingressRoute:
  dashboard:
    annotations: {}
    enabled: true
    entryPoints:
    - traefik
    labels: {}
livenessProbe:
  failureThreshold: 3
  initialDelaySeconds: 2
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 2
logs:
  access:
    enabled: false
    fields:
      general:
        defaultmode: keep
        names: {}
      headers:
        defaultmode: drop
        names: {}
    filters: {}
  general:
    level: ERROR
metrics:
  prometheus:
    entryPoint: metrics
nodeSelector: {}
persistence:
  accessMode: ReadWriteOnce
  annotations: {}
  enabled: false
  name: data
  path: /data
  size: 128Mi
podAnnotations:
  prometheus.io/port: "8082"
  prometheus.io/scrape: "true"
podDisruptionBudget:
  enabled: false
podSecurityContext:
  fsGroup: 65532
podSecurityPolicy:
  enabled: false
ports:
  metrics:
    expose: false
    exposedPort: 9100
    port: 9100
    protocol: TCP
  traefik:
    expose: false
    exposedPort: 9000
    port: 9000
    protocol: TCP
  web:
    expose: true
    exposedPort: 80
    port: 8000
    protocol: TCP
  websecure:
    expose: true
    exposedPort: 443
    http3:
      enabled: false
    middlewares: []
    port: 8443
    protocol: TCP
    tls:
      certResolver: ""
      domains: []
      enabled: true
      options: ""
priorityClassName: system-cluster-critical
providers:
  kubernetesCRD:
    allowCrossNamespace: false
    allowEmptyServices: false
    allowExternalNameServices: false
    enabled: true
    namespaces: []
  kubernetesIngress:
    allowEmptyServices: false
    allowExternalNameServices: false
    enabled: true
    namespaces: []
    publishedService:
      enabled: true
rbac:
  enabled: true
  namespaced: false
readinessProbe:
  failureThreshold: 1
  initialDelaySeconds: 2
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 2
resources: {}
rollingUpdate:
  maxSurge: 1
  maxUnavailable: 0
securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsGroup: 65532
  runAsNonRoot: true
  runAsUser: 65532
service:
  annotations:
    service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "true"
  annotationsTCP:
    service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "true"
  annotationsUDP: {}
  enabled: true
  externalIPs: []
  ipFamilyPolicy: PreferDualStack
  labels: {}
  loadBalancerSourceRanges: []
  single: true
  spec: {}
  type: LoadBalancer
serviceAccount:
  name: ""
serviceAccountAnnotations: {}
tlsOptions: {}
tlsStore: {}
tolerations:
- key: CriticalAddonsOnly
  operator: Exists
- effect: NoSchedule
  key: node-role.kubernetes.io/control-plane
  operator: Exists
- effect: NoSchedule
  key: node-role.kubernetes.io/master
  operator: Exists
topologySpreadConstraints: []
tracing: {}
volumes: []

HOOKS:
---
# Source: traefik/templates/dashboard-hook-ingressroute.yaml
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-dashboard
  annotations:
    helm.sh/hook: "post-install,post-upgrade"
    meta.helm.sh/release-name: traefik
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: traefik-kube-system
    helm.sh/chart: traefik-19.0.400
    app.kubernetes.io/managed-by: Helm
spec:
  entryPoints:
  - traefik
  routes:
  - match: PathPrefix(`/dashboard`) || PathPrefix(`/api`)
    kind: Rule
    services:
    - name: api@internal
      kind: TraefikService
MANIFEST:
---
# Source: traefik/templates/rbac/serviceaccount.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: traefik
  labels:
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: traefik-kube-system
    helm.sh/chart: traefik-19.0.400
    app.kubernetes.io/managed-by: Helm
  annotations:
---
# Source: traefik/templates/rbac/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: traefik-kube-system
  labels:
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: traefik-kube-system
    helm.sh/chart: traefik-19.0.400
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingressclasses
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
      - endpoints
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - traefik.containo.us
    resources:
      - ingressroutes
      - ingressroutetcps
      - ingressrouteudps
      - middlewares
      - middlewaretcps
      - tlsoptions
      - tlsstores
      - traefikservices
      - serverstransports
    verbs:
      - get
      - list
      - watch
---
# Source: traefik/templates/rbac/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: traefik-kube-system
  labels:
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: traefik-kube-system
    helm.sh/chart: traefik-19.0.400
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-kube-system
subjects:
  - kind: ServiceAccount
    name: traefik
    namespace: kube-system
---
# Source: traefik/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: traefik
  labels:
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: traefik-kube-system
    helm.sh/chart: traefik-19.0.400
    app.kubernetes.io/managed-by: Helm
  annotations:
    service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "true"
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: traefik-kube-system
  ipFamilyPolicy: PreferDualStack
  ports:
  - port: 80
    name: "web"
    targetPort: web
    protocol: TCP
  - port: 443
    name: "websecure"
    targetPort: websecure
    protocol: TCP
---
# Source: traefik/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: traefik
  labels:
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: traefik-kube-system
    helm.sh/chart: traefik-19.0.400
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: traefik
      app.kubernetes.io/instance: traefik-kube-system
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  minReadySeconds: 0
  template: 
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "9100"
      labels:
        app.kubernetes.io/name: traefik
        app.kubernetes.io/instance: traefik-kube-system
        helm.sh/chart: traefik-19.0.400
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: traefik
      terminationGracePeriodSeconds: 60
      hostNetwork: false
      containers:
      - image: "traefik:2.9.4"
        imagePullPolicy: IfNotPresent
        name: traefik
        resources:
        readinessProbe:
          httpGet:
            path: /ping
            port: 9000
            scheme: HTTP
          failureThreshold: 1
          initialDelaySeconds: 2
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        livenessProbe:
          httpGet:
            path: /ping
            port: 9000
            scheme: HTTP
          failureThreshold: 3
          initialDelaySeconds: 2
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        lifecycle:
        ports:
        - name: "metrics"
          containerPort: 9100
          protocol: "TCP"
        - name: "traefik"
          containerPort: 9000
          protocol: "TCP"
        - name: "web"
          containerPort: 8000
          protocol: "TCP"
        - name: "websecure"
          containerPort: 8443
          protocol: "TCP"
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
        volumeMounts:
          - name: data
            mountPath: /data
          - name: tmp
            mountPath: /tmp
        args:
          - "--global.checknewversion"
          - "--global.sendanonymoususage"
          - "--entrypoints.metrics.address=:9100/tcp"
          - "--entrypoints.traefik.address=:9000/tcp"
          - "--entrypoints.web.address=:8000/tcp"
          - "--entrypoints.websecure.address=:8443/tcp"
          - "--api.dashboard=true"
          - "--ping=true"
          - "--metrics.prometheus=true"
          - "--metrics.prometheus.entrypoint=metrics"
          - "--providers.kubernetescrd"
          - "--providers.kubernetesingress"
          - "--providers.kubernetesingress.ingressendpoint.publishedservice=kube-system/traefik"
          - "--entrypoints.websecure.http.tls=true"
          - "--log.level=DEBUG"
          - "--ping"
          - "--metrics.prometheus"
          - "--entryPoints.websecure.proxyProtocol.trustedIPs=10.64.0.2"
          - "--entryPoints.web.forwardedHeaders.trustedIPs=10.64.0.2"
          - "--entryPoints.websecure.forwardedHeaders.trustedIPs=10.64.0.2"
      volumes:
        - name: data
          emptyDir: {}
        - name: tmp
          emptyDir: {}
      tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
      priorityClassName: system-cluster-critical
      securityContext:
        fsGroup: 65532
---
# Source: traefik/templates/ingressclass.yaml
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
  labels:
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: traefik-kube-system
    helm.sh/chart: traefik-19.0.400
    app.kubernetes.io/managed-by: Helm
  name: traefik
spec:
  controller: traefik.io/ingress-controller
---
# Source: traefik/templates/validate-install-crd.yaml
###map[traefik.containo.us/v1alpha1/IngressRoute:false]#map[traefik.containo.us/v1alpha1/IngressRoute:false traefik.containo.us/v1alpha1/IngressRouteTCP:false]#map[traefik.containo.us/v1alpha1/IngressRoute:false traefik.containo.us/v1alpha1/IngressRouteTCP:false traefik.containo.us/v1alpha1/IngressRouteUDP:false]#map[traefik.containo.us/v1alpha1/IngressRoute:false traefik.containo.us/v1alpha1/IngressRouteTCP:false traefik.containo.us/v1alpha1/IngressRouteUDP:false traefik.containo.us/v1alpha1/Middleware:false]#map[traefik.containo.us/v1alpha1/IngressRoute:false traefik.containo.us/v1alpha1/IngressRouteTCP:false traefik.containo.us/v1alpha1/IngressRouteUDP:false traefik.containo.us/v1alpha1/Middleware:false traefik.containo.us/v1alpha1/MiddlewareTCP:false]#map[traefik.containo.us/v1alpha1/IngressRoute:false traefik.containo.us/v1alpha1/IngressRouteTCP:false traefik.containo.us/v1alpha1/IngressRouteUDP:false traefik.containo.us/v1alpha1/Middleware:false traefik.containo.us/v1alpha1/MiddlewareTCP:false traefik.containo.us/v1alpha1/ServersTransport:false]#map[traefik.containo.us/v1alpha1/IngressRoute:false traefik.containo.us/v1alpha1/IngressRouteTCP:false traefik.containo.us/v1alpha1/IngressRouteUDP:false traefik.containo.us/v1alpha1/Middleware:false traefik.containo.us/v1alpha1/MiddlewareTCP:false traefik.containo.us/v1alpha1/ServersTransport:false traefik.containo.us/v1alpha1/TLSOption:false]#map[traefik.containo.us/v1alpha1/IngressRoute:false traefik.containo.us/v1alpha1/IngressRouteTCP:false traefik.containo.us/v1alpha1/IngressRouteUDP:false traefik.containo.us/v1alpha1/Middleware:false traefik.containo.us/v1alpha1/MiddlewareTCP:false traefik.containo.us/v1alpha1/ServersTransport:false traefik.containo.us/v1alpha1/TLSOption:false traefik.containo.us/v1alpha1/TLSStore:false]#map[traefik.containo.us/v1alpha1/IngressRoute:false traefik.containo.us/v1alpha1/IngressRouteTCP:false traefik.containo.us/v1alpha1/IngressRouteUDP:false traefik.containo.us/v1alpha1/Middleware:false traefik.containo.us/v1alpha1/MiddlewareTCP:false traefik.containo.us/v1alpha1/ServersTransport:false traefik.containo.us/v1alpha1/TLSOption:false traefik.containo.us/v1alpha1/TLSStore:false traefik.containo.us/v1alpha1/TraefikService:false]#####################map[traefik.containo.us/v1alpha1/IngressRoute:false traefik.containo.us/v1alpha1/IngressRouteTCP:false traefik.containo.us/v1alpha1/IngressRouteUDP:false traefik.containo.us/v1alpha1/Middleware:false traefik.containo.us/v1alpha1/MiddlewareTCP:false traefik.containo.us/v1alpha1/ServersTransport:false traefik.containo.us/v1alpha1/TLSOption:false traefik.containo.us/v1alpha1/TLSStore:false traefik.containo.us/v1alpha1/TraefikService:true]##########################map[traefik.containo.us/v1alpha1/IngressRoute:false traefik.containo.us/v1alpha1/IngressRouteTCP:true traefik.containo.us/v1alpha1/IngressRouteUDP:false traefik.containo.us/v1alpha1/Middleware:false traefik.containo.us/v1alpha1/MiddlewareTCP:false traefik.containo.us/v1alpha1/ServersTransport:false traefik.containo.us/v1alpha1/TLSOption:false traefik.containo.us/v1alpha1/TLSStore:false traefik.containo.us/v1alpha1/TraefikService:true]##################################map[traefik.containo.us/v1alpha1/IngressRoute:true traefik.containo.us/v1alpha1/IngressRouteTCP:true traefik.containo.us/v1alpha1/IngressRouteUDP:false traefik.containo.us/v1alpha1/Middleware:false traefik.containo.us/v1alpha1/MiddlewareTCP:false traefik.containo.us/v1alpha1/ServersTransport:false traefik.containo.us/v1alpha1/TLSOption:false traefik.containo.us/v1alpha1/TLSStore:false traefik.containo.us/v1alpha1/TraefikService:true]####################################map[traefik.containo.us/v1alpha1/IngressRoute:true traefik.containo.us/v1alpha1/IngressRouteTCP:true traefik.containo.us/v1alpha1/IngressRouteUDP:false traefik.containo.us/v1alpha1/Middleware:false traefik.containo.us/v1alpha1/MiddlewareTCP:false traefik.containo.us/v1alpha1/ServersTransport:false traefik.containo.us/v1alpha1/TLSOption:false traefik.containo.us/v1alpha1/TLSStore:true traefik.containo.us/v1alpha1/TraefikService:true]####map[traefik.containo.us/v1alpha1/IngressRoute:true traefik.containo.us/v1alpha1/IngressRouteTCP:true traefik.containo.us/v1alpha1/IngressRouteUDP:false traefik.containo.us/v1alpha1/Middleware:false traefik.containo.us/v1alpha1/MiddlewareTCP:false traefik.containo.us/v1alpha1/ServersTransport:false traefik.containo.us/v1alpha1/TLSOption:true traefik.containo.us/v1alpha1/TLSStore:true traefik.containo.us/v1alpha1/TraefikService:true]########################################################################map[traefik.containo.us/v1alpha1/IngressRoute:true traefik.containo.us/v1alpha1/IngressRouteTCP:true traefik.containo.us/v1alpha1/IngressRouteUDP:false traefik.containo.us/v1alpha1/Middleware:false traefik.containo.us/v1alpha1/MiddlewareTCP:false traefik.containo.us/v1alpha1/ServersTransport:true traefik.containo.us/v1alpha1/TLSOption:true traefik.containo.us/v1alpha1/TLSStore:true traefik.containo.us/v1alpha1/TraefikService:true]######map[traefik.containo.us/v1alpha1/IngressRoute:true traefik.containo.us/v1alpha1/IngressRouteTCP:true traefik.containo.us/v1alpha1/IngressRouteUDP:false traefik.containo.us/v1alpha1/Middleware:true traefik.containo.us/v1alpha1/MiddlewareTCP:false traefik.containo.us/v1alpha1/ServersTransport:true traefik.containo.us/v1alpha1/TLSOption:true traefik.containo.us/v1alpha1/TLSStore:true traefik.containo.us/v1alpha1/TraefikService:true]##################map[traefik.containo.us/v1alpha1/IngressRoute:true traefik.containo.us/v1alpha1/IngressRouteTCP:true traefik.containo.us/v1alpha1/IngressRouteUDP:false traefik.containo.us/v1alpha1/Middleware:true traefik.containo.us/v1alpha1/MiddlewareTCP:true traefik.containo.us/v1alpha1/ServersTransport:true traefik.containo.us/v1alpha1/TLSOption:true traefik.containo.us/v1alpha1/TLSStore:true traefik.containo.us/v1alpha1/TraefikService:true]######################################################################################################################map[traefik.containo.us/v1alpha1/IngressRoute:true traefik.containo.us/v1alpha1/IngressRouteTCP:true traefik.containo.us/v1alpha1/IngressRouteUDP:true traefik.containo.us/v1alpha1/Middleware:true traefik.containo.us/v1alpha1/MiddlewareTCP:true traefik.containo.us/v1alpha1/ServersTransport:true traefik.containo.us/v1alpha1/TLSOption:true traefik.containo.us/v1alpha1/TLSStore:true traefik.containo.us/v1alpha1/TraefikService:true]##############################################

NOTES:
Traefik Proxy 2.9.4 has been deployed successfully 
on kube-system namespace !
